{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifItem.js","components/GifRead.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifItem","className","src","alt","GifRead","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAa5C,OACI,0BAAMC,SATY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAhBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,Y,uBCNlBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAUH,GAD/C,8DAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAcXM,GAdW,4CAAH,sDCENO,EAAU,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE7B,OACI,yBAAMc,UAAY,0BACd,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAMA,KCHLO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAatC,OAPAC,qBAAU,WACNxB,EAAOC,GAAUwB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnCf,KAAMkB,EACNL,SAAS,SAEd,CAACpB,IAEGqB,EDV0BK,CAAa1B,GAAjCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,yBAAKJ,UAAU,iBACX,4BAAKhB,GAEDoB,GAAW,uCAGXP,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,iBAAaA,EAAb,CAAkBiB,IAAKjB,EAAIC,WEahCiB,EAzBM,WAAO,IAAD,EACa1C,mBAAS,IADtB,mBAChB2C,EADgB,KACJ5C,EADI,KAGvB,OACI,oCACI,4CACA,mGACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAGQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OAEnB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAUA,SCdtC8B,IAASC,OACL,kBAAE,EAAF,MACFC,SAASC,eAAe,U","file":"static/js/main.acc41873.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const changeInputValue = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handlerSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handlerSubmit} >\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={changeInputValue}\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGif = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=0H8Tk0JhtYpzCo6ukKhN1kCzePca31Zb`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifItem = ({ title, url}) => {\r\n\r\n    return (\r\n        < div className = \"card animate__fadeInUp\" >\r\n            <img src={url} alt={title}/>\r\n            <h4>{ title}</h4>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifItem } from './GifItem';\r\n\r\nexport const GifRead = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <div className=\"cardContainer\">\r\n            <h3>{category}</h3>\r\n            {\r\n                loading && <p>cargando</p>\r\n            }\r\n            {\r\n                images.map(img => (\r\n                    <GifItem {...img} key={img.id}/>\r\n                )) \r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGif} from '../helpers/getGif';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGif(category).then(imgs => setstate({\r\n            data: imgs,\r\n            loading: false\r\n        }));\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifRead } from './GifRead';\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([])\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <p>Busca el tema de tu interés, y la app te mostrará algunos gifs</p>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n                {\r\n                    categories.map(category => (\r\n                        \r\n                        <GifRead\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    )\r\n                    )\r\n                }\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp'\n\nReactDOM.render(\n    < GifExpertApp /> ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}